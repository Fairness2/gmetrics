// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metrics/storage.go

// Package metrics is a generated GoMock package.
package metrics

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// AddCounter mocks base method.
func (m *MockIStorage) AddCounter(name string, value Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCounter indicates an expected call of AddCounter.
func (mr *MockIStorageMockRecorder) AddCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounter", reflect.TypeOf((*MockIStorage)(nil).AddCounter), name, value)
}

// AddCounters mocks base method.
func (m *MockIStorage) AddCounters(arg0 map[string]Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounters", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCounters indicates an expected call of AddCounters.
func (mr *MockIStorageMockRecorder) AddCounters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounters", reflect.TypeOf((*MockIStorage)(nil).AddCounters), arg0)
}

// GetCounter mocks base method.
func (m *MockIStorage) GetCounter(name string) (Counter, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(Counter)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockIStorageMockRecorder) GetCounter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockIStorage)(nil).GetCounter), name)
}

// GetCounters mocks base method.
func (m *MockIStorage) GetCounters() (map[string]Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounters")
	ret0, _ := ret[0].(map[string]Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockIStorageMockRecorder) GetCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockIStorage)(nil).GetCounters))
}

// GetGauge mocks base method.
func (m *MockIStorage) GetGauge(name string) (Gauge, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(Gauge)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockIStorageMockRecorder) GetGauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockIStorage)(nil).GetGauge), name)
}

// GetGauges mocks base method.
func (m *MockIStorage) GetGauges() (map[string]Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauges")
	ret0, _ := ret[0].(map[string]Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauges indicates an expected call of GetGauges.
func (mr *MockIStorageMockRecorder) GetGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauges", reflect.TypeOf((*MockIStorage)(nil).GetGauges))
}

// SetGauge mocks base method.
func (m *MockIStorage) SetGauge(name string, value Gauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockIStorageMockRecorder) SetGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockIStorage)(nil).SetGauge), name, value)
}

// SetGauges mocks base method.
func (m *MockIStorage) SetGauges(arg0 map[string]Gauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauges", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauges indicates an expected call of SetGauges.
func (mr *MockIStorageMockRecorder) SetGauges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauges", reflect.TypeOf((*MockIStorage)(nil).SetGauges), arg0)
}

// MockISynchronizationStorage is a mock of ISynchronizationStorage interface.
type MockISynchronizationStorage struct {
	ctrl     *gomock.Controller
	recorder *MockISynchronizationStorageMockRecorder
}

// MockISynchronizationStorageMockRecorder is the mock recorder for MockISynchronizationStorage.
type MockISynchronizationStorageMockRecorder struct {
	mock *MockISynchronizationStorage
}

// NewMockISynchronizationStorage creates a new mock instance.
func NewMockISynchronizationStorage(ctrl *gomock.Controller) *MockISynchronizationStorage {
	mock := &MockISynchronizationStorage{ctrl: ctrl}
	mock.recorder = &MockISynchronizationStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISynchronizationStorage) EXPECT() *MockISynchronizationStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockISynchronizationStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockISynchronizationStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISynchronizationStorage)(nil).Close))
}

// Flush mocks base method.
func (m *MockISynchronizationStorage) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockISynchronizationStorageMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockISynchronizationStorage)(nil).Flush))
}

// FlushAndClose mocks base method.
func (m *MockISynchronizationStorage) FlushAndClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAndClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAndClose indicates an expected call of FlushAndClose.
func (mr *MockISynchronizationStorageMockRecorder) FlushAndClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAndClose", reflect.TypeOf((*MockISynchronizationStorage)(nil).FlushAndClose))
}

// IsSyncMode mocks base method.
func (m *MockISynchronizationStorage) IsSyncMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSyncMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSyncMode indicates an expected call of IsSyncMode.
func (mr *MockISynchronizationStorageMockRecorder) IsSyncMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSyncMode", reflect.TypeOf((*MockISynchronizationStorage)(nil).IsSyncMode))
}

// Sync mocks base method.
func (m *MockISynchronizationStorage) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockISynchronizationStorageMockRecorder) Sync(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockISynchronizationStorage)(nil).Sync), ctx)
}
