// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/agent/sendpool/rpcclient.go

// Package sendpool is a generated GoMock package.
package sendpool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRPCConnection is a mock of RPCConnection interface.
type MockRPCConnection struct {
	ctrl     *gomock.Controller
	recorder *MockRPCConnectionMockRecorder
}

// MockRPCConnectionMockRecorder is the mock recorder for MockRPCConnection.
type MockRPCConnectionMockRecorder struct {
	mock *MockRPCConnection
}

// NewMockRPCConnection creates a new mock instance.
func NewMockRPCConnection(ctrl *gomock.Controller) *MockRPCConnection {
	mock := &MockRPCConnection{ctrl: ctrl}
	mock.recorder = &MockRPCConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCConnection) EXPECT() *MockRPCConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRPCConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRPCConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRPCConnection)(nil).Close))
}

// Invoke mocks base method.
func (m *MockRPCConnection) Invoke(ctx context.Context, method string, args, reply any, opts ...grpc.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, args, reply}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invoke indicates an expected call of Invoke.
func (mr *MockRPCConnectionMockRecorder) Invoke(ctx, method, args, reply interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, args, reply}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockRPCConnection)(nil).Invoke), varargs...)
}

// NewStream mocks base method.
func (m *MockRPCConnection) NewStream(ctx context.Context, desc *grpc.StreamDesc, method string, opts ...grpc.CallOption) (grpc.ClientStream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, desc, method}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStream", varargs...)
	ret0, _ := ret[0].(grpc.ClientStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream.
func (mr *MockRPCConnectionMockRecorder) NewStream(ctx, desc, method interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, desc, method}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockRPCConnection)(nil).NewStream), varargs...)
}
